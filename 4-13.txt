前置递增运算符 ++写在变量的前面
var age = 10;
++age; 等同于 age = age +1;
console.log(age); 11 先加一 后返回值


后置递增运算符 先返值  后加一
var p = 10;
console.log(p++ + 10); 这时候输出为20 因为后置是先返回值 后+1
console.log(p); 这时候就是+1后的结果 11

逻辑运算符

1.和 && and
两侧都为true 结果才是true 只要有一侧为false 结果就是false
console.log(3 > 5 && 3 > 2); false
console.log(3 < 5 && 3 > 2); true
2.或 || or
两侧都为false 结果才是false 只要有一侧为true 结果就是true
console.log(3 > 5 || 3 > 2); true
console.log(3 > 5 && 3 < 2); false
3.非 ! not 
console.log(!true); false

逻辑中断（短路运算）
1.逻辑 && 短路
console.log(123 && 456); 如果前面的是真的，那就显示后面的 456
console.log(0 && 123); 前面是0的话 不管后面是什么 都显示0 
console.log(0 && 1 + 1 && 456 * 2345);  0
如果有空或者否定的 是假 其余是真的 0 '' null undefined NaN 有这些存在就显示为这些本身

2.逻辑 ||短路运算 如果表达式第一个为真 那么返回的就是第一个 如果表达式第一个为假 那么就返回的是后面那个为真的值
console.log(123 || 456); 123
console.log(123 || 456 || 123 + 456); 123
console.log(0 || 123 || 456 || 456 + 123);  456 因为0为假 往后一个 456为真
**逻辑运算很重要  会影响我们程序运行结果
var num = 0;
console.log(123 || num++); 这里结果是123 对num++无影响 所以num还是0
console.log(num);  0

比较运算符 输出为布尔型 true/false
console.log(3 >= 5); false
console.log(2 <= 4); true

程序里的等于符号是 == 默认转换数据类型 会把字符串型的数据转换为数字型
console.log(3 = 5); false
console.log(18 = 18); true
console.log(18 = '18'); true 默认转换数据类型 会把字符串型的数据转换为数字型
不等于符号是 !=
console.log(18 != 18); false

程序里有全等 === 判断两边的值和数据类型是否完全相同
console.log(18 === '18'); false

赋值运算符
1.因为++只能加一，所以+=后面接想要加的数字，就可以实现添加数字自由
var num = 10;
num += 3;
console.log(num); 13
2.*= 乘一个数后再赋值
var age = 2;
age *= 4;
console.log(age); //8
3. /= 除以一个数后再赋值
var p = 15;
p /= 5;
console.log(p); //3
4. %= 是取余

运算符优先级（从上往下递减）
小括号()
一元运算符 ++ -- ! (逻辑非 ! 的优先级很高)
算数运算符 先*/% 后+-
关系运算符 > >= < <=
相等运算符 == != === !===
逻辑运算符 先&& 后 ||
赋值运算符 =
逗号运算符 , 区分多个变量

JS流程控制-分支
流程控制分为三个结构：顺序结构、分支结构、循环结构

顺序结构
程序会按照代码的先后顺序， 依次执行
分支结构
在由上到下的执行过程中， 根据不同的条件， 执行不同的路径代码， 从而得到不同的结果
1. if的语法结构
if (条件表达式) {
    执行语句
}
2.执行思路
如果 if 里的条件表达式结果为真 true 则执行大括号里面的执行语句
如果 if 条件表达式结果为假 则不执行大括号里面的语句 执行 if 语句后面的代码